using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Net;
using System.Diagnostics;
using System.Threading.Tasks;

namespace AdAwayConsole
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Started hosts file update");
            var adSources = new string[] {
                "http://adaway.org/hosts.txt",
                "http://hosts-file.net/ad_servers.asp",
                "http://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext",
                "http://winhelp2002.mvps.org/hosts.txt"
            };
            var securitySources = new string[] {
                    "http://someonewhocares.org/hosts/hosts"
                };

            var hostsFile = new StringBuilder();

            var options = new HostFileOptions()
            {
                LocalOnly = false,
                ExcludeComments = true,
                ExcludeEmptyLines = true,
                BlockAds = true,
                BlockSecurity = true
            };

            if (options.LocalOnly)
            {
                adSources = new string[] {
                    "cachedFile.txt"
                };
                securitySources = new string[] {
                    "cachedFile.txt"
                };
            }

            var sources = new List<string>();

            if (options.BlockAds)
                sources.AddRange(adSources);

            if (options.BlockSecurity)
                sources.AddRange(securitySources);

            Parallel.ForEach<string>(sources, f =>
            {
                Console.WriteLine("Downloading {0}", f);
                hostsFile.Append(new System.Net.WebClient().DownloadString(f));
            });

            //Build a new hosts file by removing extra crap and duplicate locahost declarations
            var newHostsFile = new StringBuilder();
            using (StringReader reader = new StringReader(hostsFile.ToString()))
            {
                newHostsFile.AppendLine(@"#This hosts file is a mixure of sources and is autogenerated. ");
                newHostsFile.AppendLine(@"#Do not edit it directly, add customizations to C:\Windows\System32\Drivers\etc\customizeHosts.txt");
                newHostsFile.AppendLine("\n#Last updated: " + DateTime.Now.ToString("MMM dd, yyyy at HH:mm") + "\n");

                newHostsFile.AppendLine("#Sourced from:");
                if (options.BlockSecurity)
                    foreach (var source in securitySources)
                        newHostsFile.AppendLine("#" + source);

                if (options.BlockAds)
                    foreach (var source in adSources)
                        newHostsFile.AppendLine("#" + source);

                newHostsFile.AppendLine();

                newHostsFile.AppendLine("127.0.0.1	localhost");
                newHostsFile.AppendLine("127.0.0.1	localhost.localdomain");
                newHostsFile.AppendLine("255.255.255.255	broadcasthost");
                newHostsFile.AppendLine("::1		localhost");
                newHostsFile.AppendLine("127.0.0.1	local");
                newHostsFile.AppendLine("fe80::1%lo0	localhost");

                var customFile = @"C:\Windows\System32\Drivers\etc\customizeHosts.txt";
                if (File.Exists(customFile) && new StreamReader(customFile).ReadToEnd() != "")
                {
                    newHostsFile.AppendLine("#</custom>");
                    newHostsFile.Append(new StreamReader(@"C:\Windows\System32\Drivers\etc\customizeHosts.txt").ReadToEnd() + "\n");
                    newHostsFile.AppendLine("#</custom>");
                }

                string localHosts = newHostsFile.ToString();
                string line;
                Console.WriteLine("Combining into single hosts file");
                while ((line = reader.ReadLine()) != null)
                {
                    if (!((options.ExcludeComments && line.StartsWith("#")) ||
                        (options.ExcludeEmptyLines && string.IsNullOrWhiteSpace(line)) ||
                        (localHosts.Contains(line)))) //Don't add localhost again if it exists on this line
                        newHostsFile.AppendLine(line);
                }
            }
            Console.WriteLine("Writing to hosts file");
            using (var writer = new StreamWriter(@"C:\Windows\System32\Drivers\etc\hosts", false))
            {
                writer.Write(newHostsFile.ToString());
            }
            Console.WriteLine("Finished updating hosts file");
            
            Process cmd = new Process();
            cmd.StartInfo.FileName = "cmd.exe";
            cmd.StartInfo.RedirectStandardInput = true;
            cmd.StartInfo.RedirectStandardOutput = true;
            cmd.StartInfo.CreateNoWindow = true;
            cmd.StartInfo.UseShellExecute = false;
            cmd.StartInfo.Arguments = "ipconfig /flushdns";
            cmd.Start();
            cmd.Start();
            cmd.Start();
            Console.Write("\nPress any key to exit");
            Console.Read();
        }
    }
}

public class HostFileOptions
{
    public bool LocalOnly { get; set; }
    public bool ExcludeComments { get; set; }
    public bool ExcludeEmptyLines { get; set; }
    public bool BlockAds { get; set; }
    public bool BlockSecurity { get; set; }

}
